<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:vm="clr-namespace:WpfCheatSheet"
        x:Class="WpfCheatSheet.MainWindow"
        Title="MainWindow"
        WindowStartupLocation="CenterScreen"
        SizeToContent="WidthAndHeight"
        PreviewKeyDown="Window_PreviewKeyDown">
    <Window.DataContext>
        <vm:ViewModel1 />
    </Window.DataContext>    
    <StackPanel>
        <TextBlock Visibility="Collapsed">Use Visibility.Collapsed rather than Height = 0 to hide an control because the latter keeps the control valid in the tab navigation.</TextBlock>
        <DataGrid Name="DataGrid1"
                  AutoGenerateColumns="False"
                  IsReadOnly="True"
                  SelectionMode="Single"
                  PreviewKeyDown="DataGrid1_PreviewKeyDown">
            <DataGrid.Columns>
                <DataGridTextColumn Header="Name"
                                    Binding="{Binding Name}" />
                <DataGridTextColumn Header="IsActive"
                                    Binding="{Binding IsActive}" />
                <DataGridTextColumn Header="Name"
                                    Binding="{Binding UpdatedBy}" />
                <!-- Specify StringFormat not to display seconds. -->
                <DataGridTextColumn Header="Name"
                                    Binding="{Binding UpdatedAt, StringFormat=\{0:yyyy/MM/dd HH:mm\}}" />
            </DataGrid.Columns>
        </DataGrid>
        <Image Width="200"
               Height="200"
               Source="{StaticResource GreatWave}" />
        <TextBlock Style="{StaticResource TextBlockStyle1}">Use TextBlock rather than Label because TextBlock is more lightweight and does not absorb an underscore.</TextBlock>
        <TextBox PreviewTextInput="DigitOnly"
                 LostFocus="TrimTextBox" />
        <TextBox PreviewTextInput="DigitOrOneDecimalPointOnly"
                 LostFocus="TrimTextBox" />
        <!--
            Use Grid as follows to stretch children equally.
            DockPanel stretches only the last child.
        -->
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Button Content="Press" Command="{Binding Command1}" />
            <Button Grid.Column="1"
                    Name="BarButton">Bar button</Button>
        </Grid>
    </StackPanel>
</Window>